% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{oe_get}
\alias{oe_get}
\title{Download, translate and read OSM extracts}
\usage{
oe_get(
  place,
  layer = "lines",
  provider = "geofabrik",
  ...,
  match_by = "name",
  max_string_dist = 1,
  interactive_ask = FALSE,
  download_directory = oe_download_directory(),
  force_download = FALSE,
  max_file_size = 5e+08,
  vectortranslate_options = NULL,
  osmconf_ini = NULL,
  extra_attributes = NULL,
  force_vectortranslate = NULL,
  download_only = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{place}{Description of the geographical area that should be download
through the chosen \code{provider}. Can be either a length-1 character vector, a
length-1 \code{sfc_POINT} object or a numeric vector with length 2. See details
and examples.}

\item{layer}{Which \code{layer} should be read in? Typically \code{points}, \code{lines}
(the default), \code{multilinestrings}, \code{multipolygons} or \code{other_relations}.}

\item{provider}{Which provider should be used to download the data? For the
moment we support only \href{http://download.geofabrik.de/}{\code{"geofabrik"}}.}

\item{...}{Arguments that should  be passed to \code{\link[sf:st_read]{sf::st_read()}}}

\item{match_by}{Which column of the provider data should be used for matching
the input place with the provider's data? The default is "name". Check
details and examples to understand how this parameter works. Ignored if
\code{place} is not a character vector since the matching is performed through a
spatial operation.}

\item{max_string_dist}{Numeric value greater or equal than 0. What is the
maximum distance in fuzzy matching to tolerate before asking the user to
select which zone to download? This parameter is set equal to 0 if
\code{match_by} is equal to \code{iso3166_1_alpha2} or \code{iso3166_2}. Check details and
examples to understand why this parameter is important. Ignored if \code{place}
is not a character vector since the matching is performed through a spatial
operation.}

\item{interactive_ask}{Boolean. If \code{TRUE} the function creates and
interactive menu in case the best match is further than \code{max_string_dist}.
Check details and examples to understand why this parameter is important.
Ignored if \code{place} is not a character vector since the matching is
performed through a spatial operation.}

\item{download_directory}{Where to download the file containing the OSM data?
By default this is \code{tempdir()}, which changes each time you restart R.
You can set a persistent \code{download_directory} by adding the following
to your \code{.Renviron} file (e.g. with \code{usethis::edit_r_environ()}):
\verb{OSMEXT_DOWNLOAD_DIRECTORY=/path/to/osm/data}.}

\item{force_download}{Should the file be updated if it has already been
downloaded? \code{FALSE} by default.}

\item{max_file_size}{The maximum file size to download without asking.
Default: \code{5e+8}, half a gigabyte.}

\item{vectortranslate_options}{Options to pass to the \code{\link[sf:gdal_utils]{sf::gdal_utils()}}
argument \code{options}. Set by default.}

\item{osmconf_ini}{The configuration file specifying which columns should be
in the resulting data frame. See documentation at
\href{https://gdal.org/drivers/vector/osm.html}{gdal.org} for details.}

\item{extra_attributes}{Which addition columns, corresponding to OSM keys,
should be in the resulting dataset? \code{NULL} by default.}

\item{force_vectortranslate}{Force the original \code{.pbf} file to be translated
into a \code{.gpkg} file, even if a \code{.gpkg} associated with the \code{provider} zone
already exists.}

\item{download_only}{Boolean. If \code{TRUE} then the function only returns the
path where the matched file is stored, instead of reading it. \code{FALSE} by
default.}

\item{verbose}{Boolean. If \code{TRUE} the function prints informative messages.}
}
\value{
An sf object related to the input place.
}
\description{
Download, translate and read OSM extracts
}
\details{
This function is a wrapper around ...
}
\examples{
iow = oe_get("Isle of Wight", provider = "test", verbose = TRUE)
class(iow)
summary(sf::st_geometry_type(iow))
oe_match("Isle of Wight", provider = "test")
f = oe_get("Isle of Wight", provider = "test", download_only = TRUE)
# todo: write function to get the .pbf file path
f_pbf = gsub(".gpkg", ".osm.pbf", f)
sf::st_layers(f)
sf::st_layers(f_pbf)
\dontrun{
# fix issue that different layers cannot be read-in
iow_points = oe_get("Isle of Wight", provider = "test", layer = "points")
baku = oe_get(place = "Baku", provider = "bbbike", verbose = TRUE)
}
oe_get("Isle of Wight", download_only = TRUE)
}
